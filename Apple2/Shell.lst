ca65 V2.17 - Raspbian 2.17-1
Main file   : Shell.asm
Current file: Shell.asm

000000r 1               ;ProDOS Zero Page
000000r 1               Command = $42 ;ProDOS Command
000000r 1               Unit = $43 ;ProDOS unit (SDDD0000)
000000r 1               BufferLo = $44
000000r 1               BufferHi = $45
000000r 1               BlockLo = $46
000000r 1               BlockHi = $47
000000r 1               
000000r 1               ; ProDOS Error Codes
000000r 1               IOError = $27
000000r 1               NoDevice = $28
000000r 1               WriteProtect = $2B
000000r 1               
000000r 1               InputByte = $c08e
000000r 1               OutputByte = $c08d
000000r 1               InputFlags = $c08b
000000r 1               OutputFlags = $c087
000000r 1               
000000r 1               ResetCommand = $00
000000r 1               ReadBlockCommand = $01
000000r 1               WriteBlockCommand = $02
000000r 1               GetTimeCommand = $03
000000r 1               ChangeDriveCommand = $04
000000r 1               ExecCommand = $05
000000r 1               LoadFileCommand = $06
000000r 1               SaveFileCommand = $07
000000r 1               MenuCommand = $08
000000r 1               ShellCommand = $09
000000r 1               
000000r 1               InputString = $fd6a
000000r 1               StringBuffer = $0200
000000r 1               PrintChar = $fded
000000r 1               Keyboard = $c000
000000r 1               ClearKeyboard = $c010
000000r 1               Home = $fc58
000000r 1               Wait = $fca8
000000r 1               PromptChar = $33
000000r 1               Read80Col = $c01f
000000r 1               TextPage1 = $c054
000000r 1               TextPage2 = $c055
000000r 1               
000000r 1               htab = $24
000000r 1               vtab = $25
000000r 1               BasL = $28
000000r 1               htab80 = $057b
000000r 1               BasCalc = $fbc1
000000r 1               
000000r 1               LastChar = $06
000000r 1               SlotL = $fe
000000r 1               SlotH = $ff
000000r 1               ESC = $9b
000000r 1               
000000r 1                .org $2000
002000  1  A2 07         ldx #$07 ; start at slot 7
002002  1               DetectSlot:
002002  1  A0 00         ldy #$00
002004  1  A9 FC         lda #$fc
002006  1  85 FE         sta SlotL
002008  1  8A            txa
002009  1  09 C0         ora #$c0
00200B  1  85 FF         sta SlotH
00200D  1  B1 FE         lda (SlotL),y
00200F  1  D0 1C         bne nextSlot
002011  1  C8            iny
002012  1  B1 FE         lda (SlotL),y
002014  1  D0 17         bne nextSlot
002016  1  C8            iny
002017  1  B1 FE         lda (SlotL),y
002019  1  C9 17         cmp #$17
00201B  1  D0 10         bne nextSlot
00201D  1  C8            iny
00201E  1  B1 FE         lda (SlotL),y
002020  1  C9 14         cmp #$14
002022  1  D0 09         bne nextSlot
002024  1  8A            txa
002025  1  0A            asl
002026  1  0A            asl
002027  1  0A            asl
002028  1  0A            asl
002029  1  AA            tax
00202A  1  18            clc
00202B  1  90 04         bcc Start
00202D  1               nextSlot:
00202D  1  CA            dex
00202E  1  D0 D2         bne DetectSlot
002030  1  60            rts
002031  1               Start:
002031  1  A9 8D         lda #$8d
002033  1  20 00 C3      jsr $c300 ; force 80 columns
002036  1  A5 06         lda LastChar
002038  1  48            pha
002039  1  2C 10 C0      bit ClearKeyboard
00203C  1  A9 00         lda #ResetCommand
00203E  1  20 D2 20      jsr SendByte
002041  1  A9 09         lda #ShellCommand
002043  1  20 D2 20      jsr SendByte
002046  1  20 4D 20      jsr DumpOutput
002049  1  68            pla
00204A  1  85 06         sta LastChar
00204C  1  60            rts
00204D  1               
00204D  1               DumpOutput:
00204D  1  20 F0 20      jsr GetByte
002050  1  B0 2A         bcs checkInput
002052  1  C9 00         cmp #$00
002054  1  F0 39         beq endOutput
002056  1  48            pha
002057  1  20 4F 21      jsr ClearCursor
00205A  1  68            pla
00205B  1  C9 48         cmp #'H'
00205D  1  F0 3A         beq setColumn
00205F  1  C9 56         cmp #'V'
002061  1  F0 44         beq setRow
002063  1  C9 43         cmp #'C'
002065  1  F0 29         beq clearScreen
002067  1  C9 54         cmp #'T'
002069  1  F0 4A         beq setTop
00206B  1  C9 42         cmp #'B'
00206D  1  F0 4E         beq setBottom
00206F  1  C9 55         cmp #'U'
002071  1  F0 52         beq moveUp
002073  1  20 ED FD      jsr PrintChar
002076  1  20 1E 21      jsr SetCursor
002079  1  4C 4D 20      jmp DumpOutput
00207C  1               checkInput:
00207C  1  2C 00 C0      bit Keyboard ;check for keypress
00207F  1  10 CC         bpl DumpOutput ;keep dumping output if no keypress
002081  1  AD 00 C0      lda Keyboard ;send keypress to RPi
002084  1  29 7F         and #$7f
002086  1  20 D2 20      jsr SendByte
002089  1  2C 10 C0      bit ClearKeyboard
00208C  1  4C 4D 20      jmp DumpOutput
00208F  1               endOutput:
00208F  1  60            rts
002090  1               clearScreen:
002090  1  20 58 FC      jsr Home
002093  1  20 1E 21      jsr SetCursor
002096  1  4C 4D 20      jmp DumpOutput
002099  1               setColumn:
002099  1  20 F0 20      jsr GetByte
00209C  1  85 24         sta htab
00209E  1  8D 7B 05      sta htab80
0020A1  1  20 1E 21      jsr SetCursor
0020A4  1  4C 4D 20      jmp DumpOutput
0020A7  1               setRow:
0020A7  1  20 F0 20      jsr GetByte
0020AA  1  85 25         sta vtab
0020AC  1  20 C1 FB      jsr BasCalc
0020AF  1  20 1E 21      jsr SetCursor
0020B2  1  4C 4D 20      jmp DumpOutput
0020B5  1               setTop:
0020B5  1  20 F0 20      jsr GetByte
0020B8  1  85 22         sta $22
0020BA  1  4C 4D 20      jmp DumpOutput
0020BD  1               setBottom:
0020BD  1  20 F0 20      jsr GetByte
0020C0  1  85 23         sta $23
0020C2  1  4C 4D 20      jmp DumpOutput
0020C5  1               moveUp:
0020C5  1  C6 25         dec vtab
0020C7  1  A5 25         lda vtab
0020C9  1  20 C1 FB      jsr BasCalc
0020CC  1  20 1E 21      jsr SetCursor
0020CF  1  4C 4D 20      jmp DumpOutput
0020D2  1               
0020D2  1               SendByte:
0020D2  1  48            pha
0020D3  1               waitWrite:
0020D3  1  BD 8B C0      lda InputFlags,x
0020D6  1  2A            rol
0020D7  1  2A            rol
0020D8  1  B0 F9         bcs waitWrite
0020DA  1  68            pla
0020DB  1  9D 8D C0      sta OutputByte,x
0020DE  1  A9 1E         lda #$1e ; set bit 0 low to indicate write started
0020E0  1  9D 87 C0      sta OutputFlags,x
0020E3  1               finishWrite:
0020E3  1  BD 8B C0      lda InputFlags,x
0020E6  1  2A            rol
0020E7  1  2A            rol
0020E8  1  90 F9         bcc finishWrite
0020EA  1  A9 1F         lda #$1f
0020EC  1  9D 87 C0      sta OutputFlags,x
0020EF  1  60            rts
0020F0  1               
0020F0  1               GetByte:
0020F0  1  2C 00 C0      bit Keyboard ; skip byte read if key pressed
0020F3  1  90 10         bcc keyPressed
0020F5  1  A9 1D         lda #$1d ;set read flag low
0020F7  1  9D 87 C0      sta OutputFlags,x
0020FA  1               waitRead:
0020FA  1  BD 8B C0      lda InputFlags,x
0020FD  1  2A            rol
0020FE  1  90 0C         bcc readByte
002100  1  2C 00 C0      bit Keyboard ;keypress will abort waiting to read
002103  1  10 F5         bpl waitRead
002105  1               keyPressed:
002105  1  A9 1F         lda #$1f ;set all flags high and exit
002107  1  9D 87 C0      sta OutputFlags,x
00210A  1  38            sec ;failure
00210B  1  60            rts
00210C  1               readByte:
00210C  1  BD 8E C0      lda InputByte,x
00210F  1  48            pha
002110  1  A9 1F         lda #$1f ;set all flags high
002112  1  9D 87 C0      sta OutputFlags,x
002115  1               finishRead:
002115  1  BD 8B C0      lda InputFlags,x
002118  1  2A            rol
002119  1  90 FA         bcc finishRead
00211B  1  68            pla
00211C  1  18            clc ;success
00211D  1               end:
00211D  1  60            rts
00211E  1               
00211E  1               SetCursor:
00211E  1  AD 7B 05      lda htab80 ;get horizontal location / 2
002121  1  4A            lsr
002122  1  A8            tay
002123  1  AD 55 C0      lda TextPage2
002126  1  90 03         bcc setChar
002128  1  AD 54 C0      lda TextPage1
00212B  1               setChar:
00212B  1  B1 28         lda (BasL),y
00212D  1  85 06         sta LastChar ; save so ClearCursor will pick it up
00212F  1  C9 E0         cmp #$e0
002131  1  10 0C         bpl lowerCase
002133  1  C9 C0         cmp #$c0
002135  1  10 0D         bpl upperCase
002137  1  C9 A0         cmp #$a0
002139  1  10 04         bpl symbol
00213B  1  C9 80         cmp #$80
00213D  1  10 0A         bpl noop
00213F  1               symbol:
00213F  1               lowerCase:
00213F  1               invert:
00213F  1  49 80         eor #$80
002141  1  4C 49 21      jmp storeChar
002144  1               upperCase:
002144  1  29 1F         and #$1f
002146  1  4C 49 21      jmp storeChar
002149  1               noop:
002149  1               storeChar:
002149  1  91 28         sta (BasL),y
00214B  1  AD 54 C0      lda TextPage1
00214E  1  60            rts
00214F  1               
00214F  1               ClearCursor:
00214F  1  AD 7B 05      lda htab80 ;get horizontal location / 2
002152  1  4A            lsr
002153  1  A8            tay
002154  1  AD 55 C0      lda TextPage2
002157  1  90 03         bcc restoreChar
002159  1  AD 54 C0      lda TextPage1
00215C  1               restoreChar:
00215C  1  A5 06         lda LastChar
00215E  1  91 28         sta (BasL),y
002160  1  AD 54 C0      lda TextPage1
002163  1  60            rts
002163  1               
